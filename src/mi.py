"""mi.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S2HWmPGGa40fipqqKWSKeapirqPRbqUI
"""

import numpy as np
import scipy.linalg as la
import mne.filter as bandpass
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA
from scipy.io import loadmat

class MI:
    def __init__(self):
        self.V=None
      
    def bandpass(self, X, fs, fl, fh):
        X = np.swapaxes(X, 1, 2)
        X = bandpass.filter_data(X, fs, fl, fh, verbose=False)
        X = np.swapaxes(X, 1, 2)
        return X
        
    def calcucateCovariances(self, X):
        covlist = np.empty((X.shape[0], X.shape[2], X.shape[2]))
        for i in range(len(X)):
            epoch = X[i]
            covlist[i] = np.dot(epoch.T, epoch)
        return covlist
    
    def separate_classes(self, X, Y):
        classSpecificCOV = []
        for i in range(2): 
            ind = np.where(Y==i)[0]
            classCOV = X[ind]
            classSpecificCOV.append(classCOV)
        return classSpecificCOV
    
    def CSP(self, X, Y, n):
        classSpecificCOV = self.separate_classes(X, Y)
        
        class0_avg = sum(classSpecificCOV[0])/len(classSpecificCOV[0])
        class1_avg = sum(classSpecificCOV[1])/len(classSpecificCOV[1])
        
        _,V = la.eigh(class0_avg, class0_avg+class1_avg)
        V = np.concatenate((V[:, :n], V[:, -n:]), axis=1)
        
        return V
    
    def applyCSP(self, dk, V):
        a = np.dot(np.dot(V.T, dk), V) 
        f = np.log(np.diagonal(a)/np.trace(a)) 
        return f
    
    def get_mi_features(self, x, t, y=None, fs=1000, fl=8, fh=30, n=3):

        channels = [7, 8, 9, 10, 12, 13, 14, 17, 18, 19, 20, 32, 33, 34, 35, 36, 37, 38, 39, 40]
        
        X = np.empty((len(t), 4000, 20))
        
        for i in range(len(t)):
            X[i] = x[t[i]:t[i]+4000, channels]
        
        filteredX = self.bandpass(X, fs, fl, fh)

        covX = self.calcucateCovariances(filteredX)
        if y is not None:
            y = y-1
            V = self.CSP(covX, y, n)
            self.V = V
        else:
            if self.V is None:
                raise Exception("train CSP first please")
            V=self.V
        
        features = np.empty((len(X), 2*n))
  
        for i in range(len(X)):
            epoch = covX[i]
            features[i] = self.applyCSP(epoch, V) 
            
        return features

